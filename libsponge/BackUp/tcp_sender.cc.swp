#include "tcp_sender.hh"

#include "tcp_config.hh"

#include <iostream>
#include <random>

// Dummy implementation of a TCP sender

// For Lab 3, please replace with a real implementation that passes the
// automated checks run by `make check_lab3`.

template <typename... Targs>
void DUMMY_CODE(Targs &&.../* unused */) {}

using namespace std;

//! \param[in] capacity the capacity of the outgoing byte stream
//! \param[in] retx_timeout the initial amount of time to wait before retransmitting the oldest outstanding segment
//! \param[in] fixed_isn the Initial Sequence Number to use, if set (otherwise uses a random ISN)
TCPSender::TCPSender(const size_t capacity, const uint16_t retx_timeout, const std::optional<WrappingInt32> fixed_isn)
    : _isn(fixed_isn.value_or(WrappingInt32{random_device()()}))
    , _initial_retransmission_timeout{retx_timeout}
    , _retransmission_timeout{retx_timeout}
    , _stream(capacity) {}

uint64_t TCPSender::bytes_in_flight() const { return flightBytes; }

void TCPSender::fill_window() {
    if (FINFlag)
        return;
    TCPSegment seg;

    // enter if it is the first TCPSegment
    // bool temp_syn_flag = false;
    if (!SYNFlag) {
        // temp_syn_flag = true;
        SYNFlag = true;
        seg.header().syn = true;
        // seg.header().seqno = _isn;
    }

    // get size of steam
    string readString = "";
    size_t streamSize = stream_in().buffer_size();
    // special judge if streamSize is equal to zero, then we regard it as 1
    uint16_t tmpSize = _windowSize;
    if (_windowSize == 0)
        tmpSize = 1;

    while (tmpSize - (_next_seqno - _receivedAckno) > 0 && !FINFlag) {
        availableSize = tmpSize - (_next_seqno - _receivedAckno);

        // load the seqno if not yet
        // if (!temp_syn_flag) {
        //    seg.header().seqno = next_seqno();
        //}
        seg.header().seqno = next_seqno();

        // load all of them if streamSize less than availableSize
        if (streamSize < availableSize) {
            // limit of segment
            streamSize = streamSize > TCPConfig::MAX_PAYLOAD_SIZE ? TCPConfig::MAX_PAYLOAD_SIZE : streamSize;
            readString = _stream.read(streamSize);
            if (_stream.eof() && FINFlag == false) {
                seg.header().fin = true;
                FINFlag = true;
            }

            // std::move : for performance.
            // load the payload
            seg.payload() = Buffer(std::move(readString));

            // if this segment is no use, return
            if (seg.length_in_sequence_space() == 0)
                return;

            // push the TCPSegment to queue
            _segments_out.push(seg);
            _outstandingSegment.push(seg);

            // count seqno that occupied
            _next_seqno += seg.length_in_sequence_space();
            flightBytes += seg.length_in_sequence_space();

        }
        // load substring
        // here's a question -- IF size of stream is equal to availableSize,
        // so you push all to the segment, but now you need set a FIN flag,
        // remenber that SYN/FIN flag will occupy a seqno.
        // The answer is DONT set FIN flag in this segment, instead,
        // send one more segment with payload = "" (empty) and FIN = True.
        else {
            streamSize = availableSize > TCPConfig::MAX_PAYLOAD_SIZE ? TCPConfig::MAX_PAYLOAD_SIZE : availableSize;

            readString = _stream.read(streamSize);
            seg.payload() = Buffer(std::move(readString));

            if (seg.length_in_sequence_space() == 0)
                return;

            _segments_out.push(seg);
            _outstandingSegment.push(seg);

            _next_seqno += seg.length_in_sequence_space();
            flightBytes += seg.length_in_sequence_space();
        }

        // start the timer if not
        if (!_timer.run) {
            _timer.tick = 0;
            _timer.run = 1;
        }
    }
    return;
}

//! \param ackno The remote receiver's ackno (acknowledgment number)
//! \param window_size The remote receiver's advertised window size
void TCPSender::ack_received(const WrappingInt32 ackno, const uint16_t window_size) {
    uint64_t absAckno = unwrap(ackno, _isn, _receivedAckno);
    // if this absAckno is wrong, return
    if (absAckno > _next_seqno)
        return;
    _windowSize = window_size;

    // if this absAckno is old, return
    if (absAckno <= _receivedAckno)
        return;
    else
        _receivedAckno = absAckno;

    // pop arrived segments
    while (!_outstandingSegment.empty()) {
        TCPSegment _seg = _outstandingSegment.front();

        // if the seqno at the end of outstanding segment is less than or equal to absAckno,
        // pop it, it means this segment has been received
        if (unwrap(_seg.header().seqno, _isn, _receivedAckno) + _seg.length_in_sequence_space() <= absAckno) {
            flightBytes -= _seg.length_in_sequence_space();

            _outstandingSegment.pop();
        } else
            break;
    }

    // fill window in time

    fill_window();

    // handle something mentioned in Lab3 (reset the timer)
    _retransmission_timeout = _initial_retransmission_timeout;
    _numberOfRetransmission = 0;
    _timer.tick = 0;
    return;
}

//! \param[in] ms_since_last_tick the number of milliseconds since the last call to this method
void TCPSender::tick(const size_t ms_since_last_tick) {
    _timer.tick += ms_since_last_tick;

    // Enter if timer has started && there are segments flying && time out,
    // then we resend the unresponsive segment
    if (_timer.run && !_outstandingSegment.empty() && _timer.tick >= _retransmission_timeout) {
        // step 1 : retransmission
        _segments_out.push(_outstandingSegment.front());
        // step 2 : if window size is nonzero, track it and double the RTO
        // BUT syn segment still need this
        if (_windowSize != 0 || _outstandingSegment.front().header().syn) {
            _numberOfRetransmission++;
            _retransmission_timeout *= 2;
        }
        // step 3 : reset the timer
        _timer.tick = 0;
    }
}

unsigned int TCPSender::consecutive_retransmissions() const { return _numberOfRetransmission; }

void TCPSender::send_empty_segment() {
    TCPSegment seg;
    seg.header().seqno = next_seqno();
    _segments_out.push(seg);
    return;
}

void TCPSender::send_RST_Segment() {
    TCPSegment seg;
    seg.header().seqno = next_seqno();
    seg.header().rst = true;
    _segments_out.push(seg);
    return;
}
